<template>
  <view class="index">
    <!-- <view class="index-search">
      <text class="index-search-text">通讯录</text>
      <view class="index-search-box">
        <input type="text" class="index-search-box-input" placeholder="搜索" value="" />
      </view>
    </view> -->
    <view class="index-res" id="list">

      <list class="index-res-view">
        <refresh display="show">
          <text>Refreshing...</text>
          <loading-indicator></loading-indicator>
        </refresh>
        <header>1111</header>
        <cell class="index-res-view-box" :id="`view_${index}`" v-for="(item, index) in indexData" :key="item.flag">
          <view class="index-res-view-box-flag">{{ item.flag }}</view>
          <view class="index-res-view-box-li" v-for="(iter, idx) in item.list" :key="idx">
            <view class="index-res-view-box-li-info">
              <view class="index-res-view-box-li-info-left">
                <text class="index-res-view-box-li-info-left-name">{{ iter.name }}</text>
                <view class="index-res-view-box-li-info-left-desc">
                  <text class="index-res-view-box-li-info-left-desc-txt">{{ iter.desc.post }}</text>
                  <text class="index-res-view-box-li-info-left-desc-txt">{{ iter.desc.affiliation }}</text>
                </view>
              </view>
              <view class="index-res-view-box-li-info-right">
                <text class="index-res-view-box-li-info-right-tel" @click="handlerCallPhone(iter)">{{ iter.tel }}</text>
                <view :class="['index-res-view-box-li-info-right-collect', iter.collect ? 'collected' : '']" @click="handlerCollect(iter)"></view>
              </view>
            </view>
          </view>
        </cell>
      </list>
      <view
        class="index-res-list"
        @touchstart="handlerTouchStart"
        @touchmove.stop.prevent="handlerTouchMove"
        @touchend="handlerTouchEnd"
      >
        <view class="index-res-list-li" :id="`menu_${index}`" v-for="(item, index) in indexMenu" :key="index" >{{ item }}</view>
      </view>
    </view>
  </view>
</template>

<script>
  const MENU_LIST = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ#'
  const DATA_LIST = MENU_LIST.split('').map(x => {
    return {
      flag: x,
      list: [
        {
          name: '张三' + x,
          desc: {
            post: '高管',
            affiliation: 'companies'
          },
          tel: '18319430017',
          collect: false
        },
        {
          name: '张三_' + x,
          desc: {
            post: '高管',
            affiliation: 'companies'
          },
          tel: '18319430017',
          collect: false
        },
        {
          name: '张三_' + x,
          desc: {
            post: '高管',
            affiliation: 'companies'
          },
          tel: '18319430017',
          collect: false
        }
      ]
    }
  })
  import { toastSuccess } from '@/utils/changeover.js'
  export default {
    name: 'index',
    data() {
      return {
        indexMenu: MENU_LIST,
        indexData: DATA_LIST,
        scrollviewHigh: 0,
        intoView: '',
        touchmove: false,
        winOffsetY: 0,
        winHeight: 0,
        itemHeight: 0,
        touchmoveIndex: -1,
      }
    },
    onReady() {
      // 计算屏幕剩余高度  填补剩余高度
      // uni.getSystemInfo({
      //   success: (res) => {
      //     const { windowHeight } = res
      //     this.phoneHeight = res.windowHeight;
      //     // 计算组件的高度
      //     let view = uni.createSelectorQuery().select('.index-search');
      //     view.boundingClientRect(data => {
      //       const { height } = data
      //       this.scrollviewHigh = windowHeight - height;
      //     }).exec();
      //   }
      // });
    },
    mounted() {
      // setTimeout(() => {
      //   uni.createSelectorQuery()
      //   	.in(this)
      //   	.select('#list')
      //   	.boundingClientRect()
      //   	.exec(ret => {
      //   		this.winOffsetY = ret[0].top
      //   		this.winHeight = ret[0].height
      //   		this.itemHeight = this.winHeight / this.indexData.length
      //   	})
      // }, 1000)
    },
    methods: {
      handlerLocation(index) {
        // uni?.vibrateShort();
        this.intoView = `view_${index}`
        toastSuccess(this.indexData[index].flag)
        // uni.showToast({
        //   icon: 'none',
        //   title: this.indexData[index].flag
        // })
      },
      handlerTouchStart(e) {
        this.touchmove = true
        const { target: { id } } = e
        const index = id.split('_')[1]
        this.handlerLocation(index)
      },
      handlerTouchMove(e) {
        const pageY = e.touches[0].pageY
        const index = Math.floor((pageY - this.winOffsetY) / this.itemHeight)
        if (this.touchmoveIndex === index) {
        	return false
        }
        let item = this.indexData[index]
        if (item) {
        	this.handlerLocation(index)
        	this.touchmoveIndex = index
        }
      },
      handlerTouchEnd(e) {
        this.touchmove = false
        this.touchmoveIndex = -1
      },

			handlerCollect(iter) {
				iter.collect = !iter.collect
			},

			// 拨打电话
			handlerCallPhone(iter) {
				const { tel } = iter
				makePhoneCall({ phoneNumber: tel });
			}
    }
  }
</script>

<style lang="less">
  .index {
    display: flex;
    flex-direction: column;
    justify-content: space-between;

    &-search {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
			padding: 28rpx 50rpx;
			border-bottom: 1rpx #3F8CFF solid;
      &-text {
				font-weight: 600;
				color: #00041A;
				font-size: 32rpx;
      }
			&-box{
				height: 56rpx;
				width: 500rpx;
				background: #EBF3FF;
				border-radius: 28rpx;
				display: flex;
				justify-content: space-between;
				align-items: center;
				padding: 0 20rpx;
				&::before{
					// content: '';
					display: flex;
					width: 24rpx;
					height: 24rpx;
					// background: url(../../static/icon/icon_search.png) no-repeat center;
					// background-size: 24rpx 24rpx;
				}
				&-input{
					flex: 1;
					font-weight: 500;
					color: #3F8CFF;
					font-size: 28rpx;
					margin-left: 10rpx;
				}
			}
    }

    &-res {
      flex: 1;
      background: #f1f1f1;
      position: relative;
      // overflow-y: scroll;
      &-view{
        // height: 100%;
        // overflow-y: scroll;
        &-box {
					background: #fff;
          &-flag {
						padding: 0 50rpx;
						height: 30rpx;
						line-height: 30rpx;
						background: rgba(63, 140, 255, 0.1);
						font-weight: 600;
						color: #00041A;
						font-size: 28rpx;
					}

          &-li {
						margin: 0 50rpx;
						border-bottom: 1rpx rgba(63, 140, 255, 0.2) solid;
						&:last-child{
							border: 0;
						}
            &-info {
              display: flex;
              justify-content: space-between;

              &-left {
                &-name {
									font-weight: 400;
									color: #00041A;
									font-size: 28rpx;
								}

                &-desc {
									display: flex;
									&-txt{
										font-weight: 400;
										color: #00041A;
										font-size: 18rpx;
										margin-right: 20rpx;
									}
								}
              }

              &-right {
                display: flex;
                justify-content: space-between;
                align-items: center;
                &-tel {
									font-weight: 400;
									color: #00041A;
									font-size: 28rpx;
								}

                &-collect {
									margin-left: 38rpx;
									width: 40rpx;
									height: 40rpx;
									// background: url(../../static/icon/icon_collection.png) no-repeat center;
									// background-size: 39rpx 37rpx;
									&.collected{
										// background: url(../../static/icon/icon_collection_selected.png) no-repeat center;
										// background-size: 39rpx 37rpx;
									}
								}
              }
            }
          }
        }
      }
      &-list {
        position: absolute;
        top: 0;
        bottom: 0;
        right: 0;
        width: 25rpx;
        display: flex;
        flex-direction: column;
        justify-content: center;

        &-li {
          width: 25rpx;
          height: 25rpx;
          line-height: 25rpx;
          text-align: center;
					font-weight: 600;
					color: #3F8CFF;
					font-size: 22rpx;
        }
      }
    }
  }
</style>
